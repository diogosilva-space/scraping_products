/**
 * Teste para analisar a estrutura da p√°gina e entender o carregamento
 */

const SpotGiftsScraper = require('../scrapers/spotgifts');

async function testPageStructure() {
  console.log('\nüß™ Analisando estrutura da p√°gina\n');
  
  const scraper = new SpotGiftsScraper();
  
  try {
    await scraper.initialize();
    await scraper.navigateToCatalog();
    
    // Aguarda um pouco para garantir que a p√°gina carregou
    await scraper.browserManager.wait(3000);
    
    console.log('\nüìã Analisando estrutura da p√°gina...\n');
    
    const pageInfo = await scraper.browserManager.evaluate(() => {
      return {
        // Conta produtos
        productCount: document.querySelectorAll('.produto.fav-container').length,
        
        // Verifica se h√° bot√£o "carregar mais"
        loadMoreButton: !!document.querySelector('.load-more, .btn-load-more, .ver-mais, [class*="load"]'),
        loadMoreText: document.querySelector('.load-more, .btn-load-more, .ver-mais, [class*="load"]')?.textContent,
        
        // Verifica pagina√ß√£o
        hasPagination: !!document.querySelector('.pagination, .paginacao, .pages'),
        paginationHTML: document.querySelector('.pagination, .paginacao, .pages')?.outerHTML,
        
        // Verifica links de pr√≥xima p√°gina
        nextPageLink: document.querySelector('.next, .proximo, .pagination a[rel="next"]')?.href,
        
        // Informa√ß√µes sobre total de produtos
        totalInfo: document.querySelector('.total, .count, .resultado')?.textContent,
        
        // Classes CSS na p√°gina
        bodyClasses: document.body.className,
        
        // Scripts que podem controlar carregamento
        hasInfiniteScroll: !!window.InfiniteScroll || 
                          Array.from(document.scripts).some(s => 
                            s.src.includes('infinite') || 
                            s.src.includes('lazy') || 
                            s.textContent.includes('infinite')
                          ),
        
        // Altura da p√°gina
        pageHeight: document.documentElement.scrollHeight,
        viewportHeight: window.innerHeight,
        
        // √öltima posi√ß√£o de scroll
        scrollPosition: window.scrollY
      };
    });
    
    console.log('üìä Informa√ß√µes da p√°gina:');
    console.log('  Produtos vis√≠veis:', pageInfo.productCount);
    console.log('  Altura da p√°gina:', pageInfo.pageHeight);
    console.log('  Altura do viewport:', pageInfo.viewportHeight);
    console.log('  Posi√ß√£o de scroll:', pageInfo.scrollPosition);
    console.log('');
    console.log('üîò Bot√µes e controles:');
    console.log('  Bot√£o "Carregar Mais":', pageInfo.loadMoreButton ? 'SIM' : 'N√ÉO');
    if (pageInfo.loadMoreText) {
      console.log('  Texto do bot√£o:', pageInfo.loadMoreText.trim());
    }
    console.log('  Pagina√ß√£o:', pageInfo.hasPagination ? 'SIM' : 'N√ÉO');
    if (pageInfo.paginationHTML) {
      console.log('  HTML da pagina√ß√£o:', pageInfo.paginationHTML.substring(0, 200));
    }
    if (pageInfo.nextPageLink) {
      console.log('  Link pr√≥xima p√°gina:', pageInfo.nextPageLink);
    }
    console.log('');
    console.log('üìù Outras informa√ß√µes:');
    console.log('  Total de produtos (texto):', pageInfo.totalInfo || 'N√£o encontrado');
    console.log('  Infinite Scroll:', pageInfo.hasInfiniteScroll ? 'SIM' : 'N√ÉO');
    console.log('  Classes do body:', pageInfo.bodyClasses);
    
    // Tira um screenshot
    console.log('\nüì∏ Tirando screenshot da p√°gina...');
    await scraper.browserManager.page.screenshot({ 
      path: 'test-page-structure.png',
      fullPage: true 
    });
    console.log('‚úÖ Screenshot salvo: test-page-structure.png');
    
    await scraper.cleanup();
    console.log('\n‚úÖ An√°lise conclu√≠da!');
    
  } catch (error) {
    console.error('\n‚ùå Erro:', error);
    await scraper.cleanup();
  }
}

testPageStructure().catch(console.error);

